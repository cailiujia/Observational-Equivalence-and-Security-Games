maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory game_RoR_PASS_sym begin

// Function signature and definition of the equational theory E

functions: dec/2, enc/2, fst/1, pair/2, snd/1
equations:
    dec(enc(x, k), k) = x,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Setup:
   [ Fr( ~k ) ] --[ Init_once( '1' ) ]-> [ !UseKey( ~k ) ]

rule (modulo E) Select:
   [ Fr( ~m1 ) ] --[ Init_once( '2' ) ]-> [ Choose( ~m1 ), Out( ~m1 ) ]

rule (modulo E) Attack_diff:
   [ !UseKey( k ), Choose( m1 ), Fr( ~r ) ]
  --[ Init_once( '3' ) ]->
   [ Out( diff(enc(m1, k), enc(~r, k)) ) ]

restriction Init [right]:
  "∀ #i #j x. ((Init_once( x ) @ #i) ∧ (Init_once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Init [left]:
  "∀ #i #j x. ((Init_once( x ) @ #i) ∧ (Init_once( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Attack_diff
  backward-search
    case LHS
    step( simplify )
    step( solve( !UseKey( k ) ▶₀ #i ) )
      case Setup
      step( solve( Choose( m1 ) ▶₁ #i ) )
        case Select
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !UseKey( k ) ▶₀ #i ) )
      case Setup
      step( solve( Choose( m1 ) ▶₁ #i ) )
        case Select
        MIRRORED
      qed
    qed
  qed
next
  case Rule_Destrd_0_dec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( enc(x, k) ) ▶₀ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_dec
        step( solve( !UseKey( k.1 ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case enc
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            by step( solve( !KU( ~k ) @ #vk ) )
          qed
        qed
      qed
    next
      case Select
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( enc(x, k) ) ▶₀ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_dec
        by step( contradiction /* impossible chain */ )
      next
        case enc
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            by step( solve( !KU( ~k ) @ #vk ) )
          qed
        qed
      qed
    next
      case Select
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_dec
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Select
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_dec
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Select
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_dec
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Select
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_dec
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Select
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_dec
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case Var_fresh_m1
              by step( solve( !KU( ~k ) @ #vk.1 ) )
            qed
          qed
        qed
      next
        case enc
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            step( solve( !KU( enc(~m1, ~k) ) @ #vk ) )
              case Attack_diff
              MIRRORED
            next
              case c_enc
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            qed
          qed
        qed
      qed
    next
      case Select
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_m1
        step( solve( !KU( ~m1 ) @ #vk ) )
          case Attack_diff
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case Select
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case Attack_diff
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_dec
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r
          step( solve( !UseKey( k ) ▶₀ #vr ) )
            case Setup
            step( solve( Choose( m1 ) ▶₁ #vr ) )
              case Select
              by step( solve( !KU( ~k ) @ #vk.1 ) )
            qed
          qed
        qed
      next
        case enc
        step( solve( !UseKey( k ) ▶₀ #vr ) )
          case Setup
          step( solve( Choose( m1 ) ▶₁ #vr ) )
            case Select
            step( solve( !KU( enc(~r, ~k) ) @ #vk ) )
              case Attack_diff
              MIRRORED
            next
              case c_enc
              step( solve( !KU( ~r ) @ #vk.1 ) )
                case Attack_diff
                by step( solve( !KU( ~k ) @ #vk.2 ) )
              qed
            qed
          qed
        qed
      qed
    next
      case Select
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_m1
        step( solve( !KU( ~m1 ) @ #vk ) )
          case Select
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Select
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Setup
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

end

==============================================================================
summary of summaries:

analyzed: game_IND-RoR-sym.spthy

  DiffLemma:  Observational_equivalence : verified (103 steps)

==============================================================================
