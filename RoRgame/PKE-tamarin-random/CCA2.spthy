theory CCA
begin
builtins: hashing,asymmetric-encryption
functions: enc/3,dec/2,pk/1
equations: dec(enc(x,pk(k),r),k)=x

rule register:
    [ Fr(~sk) ]
  --[ Init_once('1') ]->
    [ Out(pk(~sk)),!Key(~sk) ]

rule Select:
    [Fr(~m1)]
  --[Init_once('2') ]->
    [ Choose(~m1),Out(~m1) ]

rule Attack_diff:
let
	c1 = enc(m1,pk(sk),~r1)
	c2 = enc(~r,pk(sk),~r2)
in
    [ !Key(sk),Choose(m1),Fr(~r) ,Fr(~r1),Fr(~r2)]
  --[ Neq(m1,~r) ,Time2()]->
    [ Out(diff(c1,c2) ),State(c1,c2,~r1,~r2) ]


rule Attacker_DECoracle_after:
    [ In(enc(x,pk(key),r)),!Key(key),State(c1,c2,r1,r2) ]
  --[ Init_once('2'),Neq(enc(x,pk(key),r),c1),Neq(enc(x,pk(key),r),c2) ]->
    [ Out(x) ]




restriction Neq:
"
    All x #i. Neq(x,x) @ i ==> F
"

restriction Init:
" 
   All a #i #j. Init_once(a)@i & Init_once(a)@j ==> #i=#j
"

end
