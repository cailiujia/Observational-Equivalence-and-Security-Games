theory CCA
begin

functions: enc/2,dec/2,pk/1
equations: dec(enc(x,pk(y)),y)=x

rule register:
    [ Fr(~sk) ]
  --[ Init_once('1') ]->
    [ Out(pk(~sk)),!Key(~sk) ]

rule Select:
    [Fr(~m1)]
  --[Init_once('2') ]->
    [ Choose(~m1),Out(~m1) ]

rule Attack_diff:
let
  c1 = enc(m1,pk(sk))
  c2 = enc(~r,pk(sk))
in
    [ !Key(sk),Choose(m1),Fr(~r) ]
  --[ Neq(m1,~r) ]->
    [ Out(diff(c1,c2) ) ,State(c1,c2)]



rule Attacker_DECoracle_after:
    [ In(enc(x,pk(key))),!Key(key),State(c1,c2) ]
  --[ Init_once('2'),Neq(enc(x,pk(key)),c1),Neq(enc(x,pk(key)),c2) ]->
    [ Out(x) ]




restriction Neq:
"
    All x #i. Neq(x,x) @ i ==> F
"

restriction Init:
" 
   All a #i #j. Init_once(a)@i & Init_once(a)@j ==> #i=#j
"

end
