theory exDH_EncIND_AdvCCA2
begin

builtins: xor
functions:
      h/1,
      hk/2

rule create_identity:
[]-->[!Id($C)]

rule Init:
 [Fr(~k),!Id($A),!Id($B)]
--[Only_once('1')]->
 [!A1(~k,$A,$B),!B1(~k,$B,$A),!DEC(~k)]


rule DECoracle2:
[!DEC(k),In(c),A1_ora(c1),B1_ora(c2)]
--[Neq(c,c1),Neq(c,c2),DECora()]->
[Out(c XOR k)]

rule A1:
 let c = ~na XOR k
 in
 [!A1(k,$A,$B),Fr(~na)]
--[A1_done(),Only_once('2')]->
 [Out(<$A,$B,c>),A1_state($A,$B,~na),A1_ora(c)]

rule B1:
 let 
      na= nak XOR k
      c = ~nb XOR k
 in
 [!B1(k,$B,$A),Fr(~nb),In(<$A,$B,nak>)]
--[B1_done(),Only_once('3')]->
 [B1_state($A,$B,~nb,na),Out(<$A,$B,c,h(na)>),B1_ora(c)]

rule A2:
 let 
    nb = nbk XOR k
    K_share = hk(na,nb)
 in
 [A1_state($A,$B,na),In(<$A,$B,nbk,Ver>),!A1(k,$A,$B)]
--[
 A2_done(),
 Eq(Ver,h(na)),
 A_Secret($A,$B,K_share),
 A_Secret_na($A,$B,na),
 Only_once('4')
 ]->
 [Out(<$A,$B,h(nb)>)]

rule B2:
let 
     K_share = hk(na,nb)
in 
 [B1_state($A,$B,nb,na),In(<$A,$B,Ver>)]
--[
 B2_done(),
 Eq(Ver,h(nb)),
 B_Secret($A,$B,K_share),
 B_Secret_nb($A,$B,nb),
 Only_once('5')
 ]->
 []

restriction Inequality: 
"All x #i. Neq(x,x) @ #i ==> F"

restriction once:
        " All  #i #j x. Only_once(x)@i & Only_once(x)@j ==> #i = #j "

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"

lemma can_be_run:  
    exists-trace  
     "
   (Ex C S secret #i #j .  
   (A_Secret(C, S, secret) @ #i ) &  
   ( B_Secret(C, S, secret) @ #j ) )  
     "  

lemma A_secrecy_na: 
   "All C S x #i #o. 
    A_Secret_na(C, S,x) @i & DECora()@o ==> not (Ex #j. K(x)@j)" 



 end 